END_OF_LINE
END
END_OF_LINE
end_function
END_OF_LINE
param2:b
END_OF_LINE
param1:a
END_OF_LINE
add
call_function
END_OF_LINE
b
STORE
END_OF_LINE
3
LOAD
END_OF_LINE
b
NUM
END_OF_LINE
a
STORE
END_OF_LINE
2
LOAD
END_OF_LINE
a
NUM
END_OF_LINE
label_3_while_end:
END_OF_LINE
label_3_while
goto
END_OF_LINE
n
STORE
END_OF_LINE
2
LOAD
END_OF_LINE
n
LOAD
END_OF_LINE
ADD
END_OF_LINE
label_3_while_end
4,
n,
BGE
END_OF_LINE
4
LOAD
END_OF_LINE
n
LOAD
END_OF_LINE
label_3_while:
END_OF_LINE
label_2_else:
END_OF_LINE
2"
to
equal
not
is
"Z
WRITE
END_OF_LINE
label_2_else
2,
z,
BEQ
END_OF_LINE
2
LOAD
END_OF_LINE
z
LOAD
END_OF_LINE
z
STORE
END_OF_LINE
4
LOAD
END_OF_LINE
n
STORE
END_OF_LINE
2
LOAD
END_OF_LINE
label_1_else:
END_OF_LINE
n
STORE
END_OF_LINE
n
LOAD
END_OF_LINE
4
LOAD
END_OF_LINE
ADD
END_OF_LINE
label_1_else
3,
n,
BGT
END_OF_LINE
3
LOAD
END_OF_LINE
n
LOAD
END_OF_LINE
n
STORE
END_OF_LINE
4
LOAD
END_OF_LINE
3
LOAD
END_OF_LINE
MOD
END_OF_LINE
n
num
DECLARE
END_OF_LINE
m
STORE
END_OF_LINE
3
LOAD
END_OF_LINE
3
LOAD
END_OF_LINE
MUL
END_OF_LINE
m
num
DECLARE
END_OF_LINE
v
STORE
END_OF_LINE
3
LOAD
END_OF_LINE
3
LOAD
END_OF_LINE
DIV
END_OF_LINE
v
num
DECLARE
END_OF_LINE
z
STORE
END_OF_LINE
t
LOAD
END_OF_LINE
2
LOAD
END_OF_LINE
ADD
END_OF_LINE
t
STORE
END_OF_LINE
3
LOAD
END_OF_LINE
"hello"
WRITE
END_OF_LINE
y
STORE
END_OF_LINE
true
LOAD
END_OF_LINE
y
BOOL
END_OF_LINE
z
STORE
END_OF_LINE
2
LOAD
END_OF_LINE
z
STORE
END_OF_LINE
3
LOAD
END_OF_LINE
z
NUM
